const { response } = require("express");
const express = require("express");
require("dotenv").config();
const {
  rejectUnauthenticated,
} = require("../modules/authentication-middleware");
const pool = require("../modules/pool");
const router = express.Router();
const { GoogleSpreadsheet } = require("google-spreadsheet");

router.get("/", async (req, res) => {
  try {
    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet(
      "1PL2WylDaZisSC6TvBth2DMz45Kfk4H2vSrpzvYNV9ok"
    );

    // // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: process.env.G_CLIENT_EMAIL,
      private_key: process.env.G_PRIVATE_KEY,
    });

    await doc.loadInfo(); // loads document properties and worksheets

    const sheet = await doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

    const response = await pool.query(`SELECT
      "event"."event_name", "event".event_date, "event".event_type,
          (SELECT 
      "calendar".calendar_name FROM "calendar" WHERE "calendar".id = "event".calendar_id )
  FROM
      "event";`);

    await sheet.clearRows();

    await sheet.addRows(response.rows);

    res.sendStatus(200);
  } catch (error) {
    console.log(error);
    res.sendStatus(500);
  }
});

module.exports = router;
